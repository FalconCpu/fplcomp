
const KEY_TAB = 0x07
const KEY_BACKSPACE = 0x09
const KEY_ENTER = 0x0A
const KEY_F1 = -1
const KEY_F2 = -2
const KEY_F3 = -3
const KEY_F4 = -4
const KEY_F5 = -5
const KEY_F6 = -6
const KEY_F7 = -7
const KEY_F8 = -8
const KEY_F9 = -9
const KEY_F10 = -10
const KEY_F11 = -11
const KEY_F12 = -12
const KEY_LEFT = -13
const KEY_RIGHT = -14
const KEY_UP = -15
const KEY_DOWN = -16
const KEY_PAGE_UP = -17
const KEY_PAGE_DOWN = -18
const KEY_HOME = -19
const KEY_END = -20
const KEY_INSERT = -21
const KEY_DELETE = -22

const KEY_QUALIFIER_LSHIFT = 0x01
const KEY_QUALIFIER_RSHIFT = 0x01
const KEY_QUALIFIER_CAPS   = 0x04
const KEY_QUALIFIER_LCTRL  = 0x08
const KEY_QUALIFIER_RCTRL  = 0x10
const KEY_QUALIFIER_LALT   = 0x20
const KEY_QUALIFIER_RALT   = 0x40
const KEY_QUALIFIER_LWIN   = 0x80
const KEY_QUALIFIER_RWIN   = 0x100
const KEY_QUALIFIER_MENU   = 0x200

const KEY_QUALIFIER_ANY_SHIFT  = 0x03
const KEY_QUALIFIER_ANY_CTRL   = 0x18

# scan code to ascii mapping table.
# each scan code has 4 entries.
# First for no qualifiers, then Shift, Caps lock and finally CTRL
val keyboardScanCodes = arrayOf<Char>(
0,0,0,0,                        # 00
KEY_F9,KEY_F9,KEY_F9,KEY_F9,    # 01
0,0,0,0,                        # 02
KEY_F5,KEY_F5,KEY_F5,KEY_F5,    # 03
KEY_F3,KEY_F3,KEY_F3,KEY_F3,    # 04
KEY_F1,KEY_F1,KEY_F1,KEY_F1,	# 05
KEY_F2,KEY_F2,KEY_F2,KEY_F2,	# 06
KEY_F12,KEY_F12,KEY_F12,KEY_F12,# 07
0,0,0,0,                        # 08
KEY_F10,KEY_F10,KEY_F10,KEY_F10,# 09
KEY_F8,KEY_F8,KEY_F8,KEY_F8,    # 0A
KEY_F6,KEY_F6,KEY_F6,KEY_F6,    # 0B
KEY_F4,KEY_F4,KEY_F4,KEY_F4,	# 0C
KEY_TAB,KEY_TAB,KEY_TAB,KEY_TAB, # 0D
'`','`','`','`',	            # 0E
0,0,0,0,                        # 0F
0,0,0,0,                        # 10
0,0,0,0,                        # 11 Alt (left)
0,0,0,0,                        # 12 Shift (Left)
0,0,0,0,                        # 13
0,0,0,0,                        # 14
'q','Q','Q',17,	                # 15
'1','!','1','1',	            # 16
0,0,0,0,                        # 17
0,0,0,0,                        # 18
0,0,0,0,                        # 19
'z','Z','Z',26,	                # 1A
's','S','S',19,	                # 1B
'a','A','A',1,	                # 1C
'w','W','W',23,	                # 1D
'2','"','2','2',	            # 1E
0,0,0,0,                        # 1F
0,0,0,0,                        # 20
'c','C','C',3,	                # 21
'x','X','X',24,	                # 22
'd','D','D',4,	                # 23
'e','E','E',5,	                # 24
'4','$','4','4',	            # 25
'3','#','3','3',	            # 26
0,0,0,0,                        # 27
0,0,0,0,                        # 28
' ',' ',' ',' ',	            # 29
'v','V','V',22,	                # 2A
'f','F','F',6,	                # 2B
't','T','T',20,	                # 2C
'r','R','R',18,	                # 2D
'5','%','5','5',	            # 2E
0,0,0,0,                        # 2F
0,0,0,0,                        # 30
'n','N','N',14,	                # 31
'b','B','B',2,	                # 32
'h','H','H',8,	                # 33
'g','G','G',7,	                # 34
'y','Y','Y',26,	                # 35
'6','^','6','6',	            # 36
0,0,0,0,                        # 37
0,0,0,0,                        # 38
0,0,0,0,                        # 39
'm','M','M',13,	                # 3A
'j','J','J',10,	                # 3B
'u','U','U',21,	                # 3C
'7','&','7','7',	            # 3D
'8','*','8','8',	            # 3E
0,0,0,0,                        # 3F
0,0,0,0,                        # 40
',','<',',',',',                # 41
'k','K','K',11,                 # 42
'i','I','I',9,                  # 43
'o','O','O',15,                 # 44
'0',')','0','0',                # 45
'9','(','9','9',                # 46
0,0,0,0,                        # 47
0,0,0,0,                        # 48
'.','>','.','.',                # 49
'/','?','/','/',                # 4A
'l','L','L','L',                # 4B
';',':',';',';',                # 4C
'p','P','P',16,                 # 4D
'-','_','-','-',                # 4E
0,0,0,0,                        # 4F
0,0,0,0,                        # 50
0,0,0,0,                        # 51
'\'','@','\'','\'',               # 52
0,0,0,0,                        # 53
'[','{','[','[',                # 54
'=','+','=','=',                # 55
0,0,0,0,                        # 56
0,0,0,0,                        # 57
0,0,0,0,                        # 58 CAPS LOCK
0,0,0,0,                        # 59 RIGHT SHIFT
10,10,10,10,                    # 5A
']','}',']',']',                # 5B
0,0,0,0,                        # 5C
'#','~','#','#',             # 5D
0,0,0,0,                        # 5E
0,0,0,0,                        # 5F
0,0,0,0,                        # 60
'\\','|','\\','\\',             # 61
0,0,0,0,                        # 62
0,0,0,0,                        # 63
0,0,0,0,                        # 64
0,0,0,0,                        # 65
9,9,9,9,                        # 66
0,0,0,0,                        # 67
0,0,0,0,                        # 68
'1','1','1','1',                # 69
0,0,0,0,                        # 6A
'4','4','4','4',                # 6B
'7','7','7','7',                # 6C
0,0,0,0,                        # 6D
0,0,0,0,                        # 6E
0,0,0,0,                        # 6F
'0','0','0','0',                # 70
'.','.','.','.',                # 71
'2','2','2','2',                # 72
'5','5','5','5',                # 73
'6','6','6','6',                # 74
'8','8','8','8',                # 75
27,27,27,27,                    # 76
0,0,0,0,                        # 77   NUM LOCK
KEY_F11,KEY_F11,KEY_F11,KEY_F11,     # 78
'+','+','+','+',                # 79
'3','3','3','3',                # 7A
'-','-','-','-',                # 7B
'*','*','*','*',                # 7C
'9','9','9','9',                # 7D
0,0,0,0,                        # 7E   SCROLL LOCK
0,0,0,0,                        # 7F
0,0,0,0,                        # 80
0,0,0,0,                        # 81
0,0,0,0,                        # 82
KEY_F7,KEY_F7,KEY_F7,KEY_F7,    # 83
0,0,0,0,                        # 84
0,0,0,0,                        # 85
0,0,0,0,                        # 86
0,0,0,0,                        # 87
0,0,0,0,                        # 88
0,0,0,0,                        # 89
0,0,0,0,                        # 8A
0,0,0,0,                        # 8B
0,0,0,0,                        # 8C
0,0,0,0,                        # 8D
0,0,0,0,                        # 8E
0,0,0,0,                        # 8F
0,0,0,0,                        # 90
0,0,0,0,                        # 91 RIGHT ALT
0,0,0,0,                        # 92 PRINT SCR
0,0,0,0,                        # 93
0,0,0,0,                        # 94 RIGHT CTRL
0,0,0,0,                        # 95
0,0,0,0,                        # 96
0,0,0,0,                        # 97
0,0,0,0,                        # 98
0,0,0,0,                        # 99
0,0,0,0,                        # 9A
0,0,0,0,                        # 9B
0,0,0,0,                        # 9C
0,0,0,0,                        # 9D
0,0,0,0,                        # 9E
0,0,0,0,                        # 9F LEFT WIN
0,0,0,0,                        # A0
0,0,0,0,                        # A1
0,0,0,0,                        # A2
0,0,0,0,                        # A3
0,0,0,0,                        # A4
0,0,0,0,                        # A5
0,0,0,0,                        # A6 RIGHT WIN
0,0,0,0,                        # A7
0,0,0,0,                        # A8
0,0,0,0,                        # A9
0,0,0,0,                        # AA
0,0,0,0,                        # AB
0,0,0,0,                        # AC
0,0,0,0,                        # AD
0,0,0,0,                        # AE
0,0,0,0,                        # AF  MENU
0,0,0,0,                        # B0
0,0,0,0,                        # B1
0,0,0,0,                        # B2
0,0,0,0,                        # B3
0,0,0,0,                        # B4
0,0,0,0,                        # B5
0,0,0,0,                        # B6
0,0,0,0,                        # B7
0,0,0,0,                        # B8
0,0,0,0,                        # B9
0,0,0,0,                        # BA
0,0,0,0,                        # BB
0,0,0,0,                        # BC
0,0,0,0,                        # BD
0,0,0,0,                        # BE
0,0,0,0,                        # BF
0,0,0,0,                        # C0
0,0,0,0,                        # C1
0,0,0,0,                        # C2
0,0,0,0,                        # C3
0,0,0,0,                        # C4
0,0,0,0,                        # C5
0,0,0,0,                        # C6
0,0,0,0,                        # C7
0,0,0,0,                        # C8
0,0,0,0,                        # C9
'/','/','/','/',                # CA
0,0,0,0,                        # CB
0,0,0,0,                        # CC
0,0,0,0,                        # CD
0,0,0,0,                        # CE
0,0,0,0,                        # CF
0,0,0,0,                        # D0
0,0,0,0,                        # D1
0,0,0,0,                        # D2
0,0,0,0,                        # D3
0,0,0,0,                        # D4
0,0,0,0,                        # D5
0,0,0,0,                        # D6
0,0,0,0,                        # D7
0,0,0,0,                        # D8
0,0,0,0,                        # D9
13,13,13,13,                    # DA
0,0,0,0,                        # DB
0,0,0,0,                        # DC
0,0,0,0,                        # DD
0,0,0,0,                        # DE
0,0,0,0,                        # DF
0,0,0,0,                        # E0
0,0,0,0,                        # E1
0,0,0,0,                        # E2
0,0,0,0,                        # E3
0,0,0,0,                        # E4
0,0,0,0,                        # E5
0,0,0,0,                        # E6
0,0,0,0,                        # E7
0,0,0,0,                        # E8
KEY_END,KEY_END,KEY_END,KEY_END,    # E9
0,0,0,0,                        # EA
KEY_LEFT,KEY_LEFT,KEY_LEFT,KEY_LEFT,    # EB
KEY_HOME,KEY_HOME,KEY_HOME,KEY_HOME,    # EC
0,0,0,0,                        # ED
0,0,0,0,                        # EE
0,0,0,0,                        # EF
KEY_INSERT,KEY_INSERT,KEY_INSERT,KEY_INSERT,    # F0
KEY_DELETE,KEY_DELETE,KEY_DELETE,KEY_DELETE,    # F1
KEY_DOWN,KEY_DOWN,KEY_DOWN,KEY_DOWN,    # F2
0,0,0,0,                        # F3
KEY_RIGHT,KEY_RIGHT,KEY_RIGHT,KEY_RIGHT,    # F4
KEY_UP,KEY_UP,KEY_UP,KEY_UP,    # F5
0,0,0,0,                        # F6
0,0,0,0,                        # F7
0,0,0,0,                        # F8
0,0,0,0,                        # F9
KEY_PAGE_DOWN,KEY_PAGE_DOWN,KEY_PAGE_DOWN,KEY_PAGE_DOWN,    # F2
0,0,0,0,                        # FB
0,0,0,0,                        # FC
KEY_PAGE_UP,KEY_PAGE_UP,KEY_PAGE_UP,KEY_PAGE_UP,    # FD
0,0,0,0)                        # FE

var keyboardSeenE0 = false
var keyboardSeenF0 = false
var qualifiers = 0

# Read a key from the keyboard
# Returns the ASCII code of the key pressed if any, else 0
fun readKeyboard() -> Char
    # Read a scan code from the keyboard. The hardware has a 1kB FIFO buffer - and given that people can only type
    # so fast - we can just poll this register at a convenient time.
    # The following memory mapped registers gives the next byte from the fifo, or -1 if the fifo is empty
    var key = HWREGS_BASE.keyboard

    if key = -1
        return 0

    # Multi-byte scan codes have E0 or F0 as the first byte.
    if key = 0xE0
        keyboardSeenE0 = true
        return 0

    if key = 0xF0
        keyboardSeenF0 = true
        return 0

    # The E0 code is used to indicate an extended key. We simply map these as key code + 128
    if keyboardSeenE0
        key = key + 128

    var ret : Char = 0
    # Handle all the special keys
    if key = 0x11 # left alt
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_LALT
        else
            qualifiers = qualifiers | KEY_QUALIFIER_LALT
    else if key = 0x12 # left shift
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_LSHIFT
        else
            qualifiers = qualifiers | KEY_QUALIFIER_LSHIFT
    else if key = 0x14 # left ctrl
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_LCTRL
        else
            qualifiers = qualifiers | KEY_QUALIFIER_LCTRL
    else if key = 0x58 # caps lock
        if not keyboardSeenF0
            qualifiers = qualifiers ^ KEY_QUALIFIER_CAPS
    else if key = 0x59 # right shift
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_RSHIFT
        else
            qualifiers = qualifiers | KEY_QUALIFIER_RSHIFT
    else if key = 0x91 # right alt
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_RALT
        else
            qualifiers = qualifiers | KEY_QUALIFIER_RALT
    else if key = 0x94 # right ctrl
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_RCTRL
        else
            qualifiers = qualifiers | KEY_QUALIFIER_RCTRL
    else if key = 0x9F # left windows
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_LWIN
        else
            qualifiers = qualifiers | KEY_QUALIFIER_LWIN
    else if key = 0xA6 # left windows
        if keyboardSeenF0
            qualifiers = qualifiers & ~KEY_QUALIFIER_RWIN
        else
            qualifiers = qualifiers | KEY_QUALIFIER_RWIN
    else
        # general key - conver to ascii
        val column : Int
        if (qualifiers & KEY_QUALIFIER_ANY_SHIFT) != 0
            column = 1
        else if (qualifiers & KEY_QUALIFIER_CAPS) != 0
            column = 2
        else if (qualifiers & KEY_QUALIFIER_ANY_CTRL) != 0
            column = 3
        else
            column = 0

        if not keyboardSeenF0 # ignore break codes
            val qualifier = 0
            ret = keyboardScanCodes[4*key + column]

    keyboardSeenF0 = false
    keyboardSeenE0 = false
    return ret
