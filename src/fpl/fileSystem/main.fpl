
val blockDevice = BlockDevice("dh0")
val fileSystem = FileSystem(blockDevice)
var currentDirectory = fileSystem.getRootDirectory()!!

fun main()
    outputChannel = PrintChannel.SCREEN
    val le = LineEditor()
    fileSystem.allocateBuffers()
    clearScreen()
    initialBanner()

    while(true)
        printPrompt()
        val cmd = le.getLine()
        setFgColor(8)
        println ""
        processCommand(cmd)
        free(cmd)


fun printPrompt()
    setFgColor(14)
    print "\n> "
    setFgColor(15)

fun initialBanner()
    setFgColor(11)
    println "FalconOS 0.0.1"
    println ""
    setFgColor(15)



fun cmdLs()
    currentDirectory.beginDirectoryScan()
    while currentDirectory.nextDirectorScan()
        fwprint(currentDirectory.name, 40)
        if currentDirectory.isDirectory
            print "   Dir"
        else
            fwprint(currentDirectory.fileLength,6)
        print " "
        println currentDirectory.inodeNumber

fun cmdAvail()
    val freeMem = getFreeMemory()
    println "Free memory = ",freeMem


fun cmdCat(words:List)
    if words.size<2
        println "Usage: cat <filename>"
        return

    val fh = currentDirectory.openFile(words.get(1))
    if fh = null
        println("Cannot open file")
        return

    val buffer = makeString(1024)

    while(true)
        val length = fh.read((buffer:Pointer), 1024)
        if length = 0
            free(buffer)
            fh.close()
            return
        (buffer:Pointer<Int>)[-1] = length
        print buffer

fun split(str:String) -> List
    var index = 0
    val ret = List()
    while true
        # skip any spaces
        while index<str.length and str[index] = ' '
            index = index + 1
        if index>=str.length
            return ret

        # step over any non-spaces
        val start = index
        while index<str.length and str[index] != ' '
            index = index + 1

        ret.add(makeString((str:Pointer<Char>)+start, index-start))
    end while
    return ret
end fun

fun processCommand(cmd: String)
    val words = split(cmd)
    if words.size = 0
        return

    val c = words.get(0)
    if c = "cls"
        if words.size != 1
            println("Usage: cls")
            free(words)
            return
        clearScreen()
    else if c = "version"
        if words.size != 1
            println("Usage: cls")
            return
        println("Version 0.0.1")
    else if c = "ls"
        cmdLs()
    else if c = "cat"
        cmdCat(words)
    else if c = "dumpMemory"
        dumpMemory()
    else if c = "avail"
        cmdAvail()
    else
        println "Unknown command ",c

    words.free()

