
fun min(a:Int, b:Int) -> Int
    return if a<b then a else b

fun max(a:Int, b:Int) -> Int
    return if a>b then a else b


fun memcpy(dest:Pointer, src:Pointer, size:Int)
    if ((dest:Int)|(src:Int)|size) & 3 = 0
        # everything is a multiple of 4 - we can use word copies
        val dc = (dest:MutableArray<Int>)
        val sc  = (src:MutableArray<Int>)
        for i in 0 to <size/4
            dc[i] = sc[i]
    else
        # not a multiple of 4 - we have to use byte copies
        val dc = (dest:MutableArray<Char>)
        val sc = (src:MutableArray<Char>)
        for i in 0 to <size
            dc[i] = sc[i]

fun strcat(s1:String, s2:String) -> String
    if s1.length=0
        return s2
    if s2.length=0
        return s1
    val length = s1.length + s2.length
    val result = malloc(length, String.TypeDescriptor)
    memcpy((result:Pointer), (s1:Pointer), s1.length)
    memcpy((result+s1.length:Pointer), (s2:Pointer), s2.length)
    (result:Pointer<Int>)[-1]=length
    return (result:String)

fun substr(s1:String, start:Int, length:Int) -> String
    val len = if length<s1.length-start then length else s1.length-start
    val result = malloc(len,String.TypeDescriptor)
    memcpy((result:Pointer), ((s1:Int)+start:Pointer), len)
    return (result:String)

fun strequals(s1:String, s2:String) -> Bool
    if (s1:Int) = (s2:Int)
        return true
    if s1.length != s2.length
        return false
    for i in 0 to <s1.length
        if s1[i] != s2[i]
            return false
    return true

fun strcmp(s1:String, s2:String) -> Int
    val len = if s1.length<s2.length then s1.length else s2.length
    for i in 0 to <len
        val ret = s1[i] - s2[i]
        if ret != 0
            return ret
    return s1.length - s2.length

# create an empty string with a given allocation size
fun makeString(alloc:Int) -> String
    val result = malloc(alloc,String.TypeDescriptor)
    (result:Pointer<Int>)[-1]=0
    return (result:String)

# Create a string from a char array and a length
fun makeString(addr:Pointer<Char>, length:Int) -> String
    val result = malloc(length,String.TypeDescriptor)
    memcpy(result, addr, length)
    (result:Pointer<Int>)[-1]=length
    return (result:String)

fun setString(dest:String, data:Pointer<Char>, length:Int)
    # TODO - add some bounds checking
    memcpy((dest:Pointer<Char>), data, length)
    (dest:Pointer<Int>)[-1]=length

fun c_strlen(p:Pointer) -> Int
    var len = 0
    val pc = (p:Array<Char>)
    while pc[len] != 0
        len = len + 1
    return len

# compare an fpl String with a C string
fun c_strcmp(s1:String, s2:Pointer<Char>) -> Bool
    for i in 0 to <s1.length
        if s1[i] != s2[i]
            return false
    return s2[s1.length] = 0


