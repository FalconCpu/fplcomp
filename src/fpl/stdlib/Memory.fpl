
const HEAP_START = 0x1000
const HEAP_END = 0x3f80000

const systemVars = (0x100 : SystemVars)     # Allocate a block of memory at 0x100 to act as system variable space

# Pre-allocate a chunk of memory for system variables
class SystemVars
    var freeList   : FreeChunk?        # Pointer to the first free chunk
    var freeMemory : Int            # Total amount of free memory

# The compiler will generate this structure for each class
class ClassDescriptor
    val name : String
    val size : Int                  # This is the size of the user data, in bytes
    # vtable goes here

const MEM_MAGIC_NUMBER = 0xFBEEDA7A
const MEM_HEADER_SIZE = 16

class AllocatedChunk
    var classDescriptor  : ClassDescriptor
    var size             : Int     # Size of user data portion of this chunk
    var refCount         : Int     # Number of references to this object
    var numElements      : Int     # For an array/String holds the number of elements in an array
                                   # For other classes this is user defined

class FreeChunk
    var magicNumber : Int          # Magic number to check for corruption
    var size : Int                 # Size of user data portion of this chunk
    var next : FreeChunk?          # Pointer to the next free chunk
    var spare : Int                # Spare bytes to match the size of the allocated chunk

fun initializeMemory()
    # Initialise the free list
    val freeChunk = (HEAP_START : FreeChunk)
    freeChunk.magicNumber = MEM_MAGIC_NUMBER
    freeChunk.size = HEAP_END - HEAP_START - MEM_HEADER_SIZE
    freeChunk.next = null
    systemVars.freeList = freeChunk
    systemVars.freeMemory = HEAP_END - HEAP_START - 16

# ###########################################################################################
#                          malloc
# ###########################################################################################
#
# Allocate a chunk of memory.
# size = size of allocation in bytes

fun malloc(size: Int, classDescriptor:Pointer ) -> Pointer
    val roundedSize = (size+15) & 0xfffffff0     # Round up to the next 16 byte boundary

    # find the first free chunk that is big enough
    var chunk = systemVars.freeList
    var prevChunk : FreeChunk? = null
    while chunk!=null and chunk.size<roundedSize
        prevChunk = chunk
        chunk = chunk.next

    if chunk=null
        fatal(FATAL_ERROR_OUT_OF_MEMORY, 0)
        return (0:Pointer) # Should never get here
    if chunk.magicNumber!=MEM_MAGIC_NUMBER
        fatal(FATAL_ERROR_MEMORY_CORRUPT, (chunk:Int))

    # remove the chunk from the free list
    if prevChunk=null
        systemVars.freeList = chunk.next
    else
        prevChunk.next = chunk.next
    systemVars.freeMemory = systemVars.freeMemory - chunk.size - MEM_HEADER_SIZE

    # See if the chunk is big enough to split
    val remainder = chunk.size - roundedSize
    if remainder>=MEM_HEADER_SIZE
        val remainderChunk = ((chunk:Pointer)+MEM_HEADER_SIZE+roundedSize : FreeChunk)
        remainderChunk.size = remainder-MEM_HEADER_SIZE
        addToFreeList(remainderChunk)

    # fill in the header for the newly allocated chunk
    val allocatedChunk = (chunk:AllocatedChunk)
    allocatedChunk.classDescriptor = (classDescriptor:ClassDescriptor)
    allocatedChunk.size = roundedSize
    allocatedChunk.refCount = 1
    allocatedChunk.numElements = 0

    return (chunk:Pointer) + MEM_HEADER_SIZE

fun addToFreeList(chunk: FreeChunk)
    # Insert the chunk into the free list in order of increasing size
    val size = chunk.size
    chunk.magicNumber = MEM_MAGIC_NUMBER

    var prevChunk : FreeChunk? = null
    var currChunk = systemVars.freeList
    while currChunk!=null and currChunk.size<size
        prevChunk = currChunk
        currChunk = currChunk.next

    # Insert the chunk
    if prevChunk=null
        systemVars.freeList = chunk
    else
        prevChunk.next = chunk
    chunk.next = currChunk

    systemVars.freeMemory = systemVars.freeMemory + size + MEM_HEADER_SIZE

fun getFreeMemory() -> Int
    return systemVars.freeMemory

fun free2(addr:Pointer)
    free(addr)

fun free(addr:Pointer)
    # Find the chunk
    if addr=null
        return

    val chunk = (addr-MEM_HEADER_SIZE : FreeChunk)
    if chunk.magicNumber=MEM_MAGIC_NUMBER
        fatal(FATAL_ERROR_DOUBLE_FREE, (chunk:Int))
    addToFreeList(chunk)

fun dumpMemoryString(s1:String)
    val len = if s1.length<20 then s1.length else 20
    for i in 0 to <len
        val c = s1[i]
        if (c:Int)>=32 and (c:Int)<=126
            kprint(s1[i])

fun dumpMemory()
    kprint("ADDRESS  SIZE     STATUS\n")
    var addr = HEAP_START
    while addr<HEAP_END
        val chunk = (addr : FreeChunk)
        kprint(addr)
        kprint(" ")
        kprint(chunk.size)
        kprint(" ")
        if chunk.magicNumber=MEM_MAGIC_NUMBER
            kprint("free\n")
        else
            val allocatedChunk = (chunk : AllocatedChunk)
            kprint(allocatedChunk.classDescriptor.name, 20)
            kprint(" ")
            if ((allocatedChunk.classDescriptor:Pointer) = String.TypeDescriptor)
                dumpMemoryString((addr+16:String))
            else
                kprint(allocatedChunk.numElements)
            kprint("\n")
        addr = addr + MEM_HEADER_SIZE + chunk.size




