
enum PrintChannel(UART,SCREEN)
var outputChannel = PrintChannel.UART

const FONT_WIDTH = 8
const FONT_HEIGHT = 12
const SCREEN_WIDTH_CHAR = 80
const SCREEN_HEIGHT_CHAR = 40
const CHAR_LF = 10

var cursorX = 0
var cursorY = 0
var screenHasBeenScrolled = false  # set to true if the screen has scrolled

fun uart_transmit(char: Int)
    val hwregs = HWREGS_BASE
    # Wait until there is space in the fifo
    while hwregs.uart_tx=0
        val dummy = 1
    hwregs.uart_tx = char

fun uart_receive() -> Int
    val hwregs = HWREGS_BASE
    return hwregs.uart_rx

fun moveTo(x: Int, y: Int)
    cursorX = x
    cursorY = y

fun screenPrint(c:Char)
    if c=CHAR_LF
        cursorX = 0
        cursorY = cursorY + 1
    else if c>=' '
        drawCharacter(cursorX * FONT_WIDTH, cursorY * FONT_HEIGHT, c)
        cursorX = cursorX + 1
        if cursorX>=SCREEN_WIDTH_CHAR
            cursorX = 0
            cursorY = cursorY + 1
    if cursorY>=SCREEN_HEIGHT_CHAR
        scrollScreenVertical(FONT_HEIGHT)
        cursorY = SCREEN_HEIGHT_CHAR-1
        screenHasBeenScrolled = true

fun print(c:Char)
    if outputChannel=PrintChannel.UART
        uart_transmit((c : Int))
    else
        screenPrint(c)

fun print(c:Bool)
    if c
        print "true"
    else
        print "false"

fun printHex(in_value: Int)
    var value = in_value
    for i in 0 to 7
        val digit = value ushr 28
        if digit<10
            print (digit+'0' : Char)
        else
            print (digit+'A'-10 : Char)
        value = value shl 4

fun print(str:String)
    for i in 0 to <str.length
        print str[i]

fun fwprint(str:String, width:Int)
    val len = min(str.length, width)
    for i in 0 to <len
        print str[i]
    for i in len to <width
        print ' '


fun printNewline()
    print '\n'

fun print(value: Int)
    var v = value

    if v<0
        print '-'
        v = -v

    # allocate a buffer on the stack to hold the digits
    val buffer = local MutableArray<Char>(10)
    var i = 0

    # generate the digits in reverse order
    repeat
        val digit = v % 10
        buffer[i] = (digit + '0' : Char)
        v = v / 10
        i = i + 1
    until v = 0

    # print the digits in correct order
    while i>0
        i = i - 1
        print(buffer[i])
end fun

fun fwprint(value: Int, width:Int)
    # allocate a buffer on the stack to hold the digits
    val buffer = local MutableArray<Char>(10)
    for i in 0 to <10
        buffer[i] = ' '

    var v = value
    var index = 9
    var negative = false
    if v<0
        print '-'
        negative = true

    # generate the digits in reverse order
    repeat
        val digit = v % 10
        buffer[index] = (digit + '0' : Char)
        v = v / 10
        index = index - 1
    until v = 0

    index = min(10-width, index)

    # print the digits in correct order
    while index<10
        print(buffer[index])
        index = index + 1
end fun


fun kprint(c:Char)
    uart_transmit((c : Int))

fun kprint(str:String)
    for i in 0 to <str.length
        kprint(str[i])

fun kprint(str:String, width:Int)
    val len = min(str.length, width)
    for i in 0 to <len
        kprint(str[i])
    for i in len to <width
        kprint(' ')

fun kprint(in_value: Int)
    var value = in_value
    for i in 0 to 7
        val digit = value ushr 28
        if digit<10
            kprint ((digit+'0' : Char))
        else
            kprint ((digit+'A'-10 : Char))
        value = value shl 4

